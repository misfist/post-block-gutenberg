"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerFormatType = registerFormatType;

var _element = require("@wordpress/element");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _hooks = require("@wordpress/hooks");

var _compose = require("@wordpress/compose");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Registers a new format provided a unique name and an object defining its
 * behavior.
 *
 * @param {string}   name                 Format name.
 * @param {Object}   settings             Format settings.
 * @param {string}   settings.tagName     The HTML tag this format will wrap the selection with.
 * @param {string}   [settings.className] A class to match the format.
 * @param {string}   settings.title       Name of the format.
 * @param {Function} settings.edit        Should return a component for the user to interact with the new registered format.
 *
 * @return {WPFormat|undefined} The format, if it has been successfully registered;
 *                              otherwise `undefined`.
 */
function registerFormatType(name, settings) {
  settings = (0, _objectSpread2.default)({
    name: name
  }, settings);

  if (typeof settings.name !== 'string') {
    window.console.error('Format names must be strings.');
    return;
  }

  if (!/^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$/.test(settings.name)) {
    window.console.error('Format names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-format');
    return;
  }

  if ((0, _data.select)('core/rich-text').getFormatType(settings.name)) {
    window.console.error('Format "' + settings.name + '" is already registered.');
    return;
  }

  if (typeof settings.tagName !== 'string' || settings.tagName === '') {
    window.console.error('Format tag names must be a string.');
    return;
  }

  if ((typeof settings.className !== 'string' || settings.className === '') && settings.className !== null) {
    window.console.error('Format class names must be a string, or null to handle bare elements.');
    return;
  }

  if (!/^[_a-zA-Z]+[a-zA-Z0-9-]*$/.test(settings.className)) {
    window.console.error('A class name must begin with a letter, followed by any number of hyphens, letters, or numbers.');
    return;
  }

  if (settings.className === null) {
    var formatTypeForBareElement = (0, _data.select)('core/rich-text').getFormatTypeForBareElement(settings.tagName);

    if (formatTypeForBareElement) {
      window.console.error("Format \"".concat(formatTypeForBareElement.name, "\" is already registered to handle bare tag name \"").concat(settings.tagName, "\"."));
      return;
    }
  } else {
    var formatTypeForClassName = (0, _data.select)('core/rich-text').getFormatTypeForClassName(settings.className);

    if (formatTypeForClassName) {
      window.console.error("Format \"".concat(formatTypeForClassName.name, "\" is already registered to handle class name \"").concat(settings.className, "\"."));
      return;
    }
  }

  if (!('title' in settings) || settings.title === '') {
    window.console.error('The format "' + settings.name + '" must have a title.');
    return;
  }

  if ('keywords' in settings && settings.keywords.length > 3) {
    window.console.error('The format "' + settings.name + '" can have a maximum of 3 keywords.');
    return;
  }

  if (typeof settings.title !== 'string') {
    window.console.error('Format titles must be strings.');
    return;
  }

  (0, _data.dispatch)('core/rich-text').addFormatTypes(settings);

  if (settings.__experimentalCreatePrepareEditableTree) {
    (0, _hooks.addFilter)('experimentalRichText', name, function (OriginalComponent) {
      var selectPrefix = "format_prepare_props_(".concat(name, ")_");
      var dispatchPrefix = "format_on_change_props_(".concat(name, ")_");

      var Component = function Component(props) {
        var newProps = (0, _objectSpread2.default)({}, props);
        var propsByPrefix = Object.keys(props).reduce(function (accumulator, key) {
          if (key.startsWith(selectPrefix)) {
            accumulator[key.slice(selectPrefix.length)] = props[key];
          }

          if (key.startsWith(dispatchPrefix)) {
            accumulator[key.slice(dispatchPrefix.length)] = props[key];
          }

          return accumulator;
        }, {});
        var args = {
          richTextIdentifier: props.identifier,
          blockClientId: props.clientId
        };

        if (settings.__experimentalCreateOnChangeEditableValue) {
          newProps["format_value_functions_(".concat(name, ")")] = settings.__experimentalCreatePrepareEditableTree(propsByPrefix, args);
          newProps["format_on_change_functions_(".concat(name, ")")] = settings.__experimentalCreateOnChangeEditableValue(propsByPrefix, args);
        } else {
          newProps["format_prepare_functions_(".concat(name, ")")] = settings.__experimentalCreatePrepareEditableTree(propsByPrefix, args);
        }

        return (0, _element.createElement)(OriginalComponent, newProps);
      };

      var hocs = [];

      if (settings.__experimentalGetPropsForEditableTreePreparation) {
        hocs.push((0, _data.withSelect)(function (sel, _ref) {
          var clientId = _ref.clientId,
              identifier = _ref.identifier;
          return (0, _lodash.mapKeys)(settings.__experimentalGetPropsForEditableTreePreparation(sel, {
            richTextIdentifier: identifier,
            blockClientId: clientId
          }), function (value, key) {
            return selectPrefix + key;
          });
        }));
      }

      if (settings.__experimentalGetPropsForEditableTreeChangeHandler) {
        hocs.push((0, _data.withDispatch)(function (disp, _ref2) {
          var clientId = _ref2.clientId,
              identifier = _ref2.identifier;
          return (0, _lodash.mapKeys)(settings.__experimentalGetPropsForEditableTreeChangeHandler(disp, {
            richTextIdentifier: identifier,
            blockClientId: clientId
          }), function (value, key) {
            return dispatchPrefix + key;
          });
        }));
      }

      return hocs.length ? (0, _compose.compose)(hocs)(Component) : Component;
    });
  }

  return settings;
}
//# sourceMappingURL=register-format-type.js.map